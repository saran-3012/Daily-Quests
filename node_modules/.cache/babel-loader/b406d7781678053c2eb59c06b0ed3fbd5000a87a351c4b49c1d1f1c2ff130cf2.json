{"ast":null,"code":"var _jsxFileName = \"C:\\\\My Projects\\\\todo-list-app\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Theme\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n\n  // Tasks\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const storedTasks = JSON.parse(localStorage.getItem('tasks'));\n    storedTasks ? setTasks(storedTasks) : setTasks([]);\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n  const addTask = task => {\n    setTasks([...tasks, task]);\n  };\n  const compareTasks = (task1, task2) => {\n    // dont forget to code here\n\n    // This function compares two tasks by all its values\n    return false;\n  };\n  const deleteTask = task => {\n    let idx = -1;\n    for (let i = 0; i < tasks.length; i++) {\n      if (compareTasks(tasks[i], task)) {\n        idx = i;\n        break;\n      }\n    }\n    if (idx != -1) {\n      setTasks([...tasks.slice(0, idx), ...tasks.slice(idx + 1)]);\n    }\n  };\n  const updateTask = (task, newTask) => {\n    for (let i = 0; i < tasks.length; i++) {\n      if (compareTasks(tasks[i], task)) {\n        tasks[i];\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'App ' + (isDarkMode ? 'dark-theme' : ''),\n    children: /*#__PURE__*/_jsxDEV(Navbar, {\n      toggleTheme: toggleTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"fitkbm7AESpic8eXh9LusE6OCgQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","jsxDEV","_jsxDEV","App","_s","isDarkMode","setIsDarkMode","toggleTheme","tasks","setTasks","storedTasks","JSON","parse","localStorage","getItem","setItem","stringify","addTask","task","compareTasks","task1","task2","deleteTask","idx","i","length","slice","updateTask","newTask","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/My Projects/todo-list-app/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\n\nconst App = () => {\n  // Theme\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n\n  // Tasks\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const storedTasks = JSON.parse(localStorage.getItem('tasks'));\n    (storedTasks)? setTasks(storedTasks):setTasks([]);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  const addTask = (task) => {\n    setTasks([...tasks, task]);\n  };\n\n  const compareTasks = (task1, task2) => {\n    // dont forget to code here\n\n\n    // This function compares two tasks by all its values\n    return false;\n  };\n\n  const deleteTask = (task) => {\n    let idx=-1;\n    for (let i = 0; i < tasks.length; i++) {\n      if (compareTasks(tasks[i], task)) {\n        idx = i;\n        break;\n      }\n    }\n    if(idx!=-1){\n      setTasks([...tasks.slice(0, idx), ...tasks.slice(idx + 1)]);\n    }\n  };\n\n  const updateTask = (task, newTask) => {\n    for (let i = 0; i < tasks.length; i++) {\n      if (compareTasks(tasks[i], task)) {\n        tasks[i]\n      }\n    }\n  };\n\n  return (\n    <div className={'App ' + (isDarkMode? 'dark-theme':'')}>\n      <Navbar toggleTheme={toggleTheme} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACxBD,aAAa,CAAC,CAACD,UAAU,CAAC;EAC5B,CAAC;;EAED;EACA,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtCC,SAAS,CAAC,MAAM;IACd,MAAMW,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC5DJ,WAAW,GAAGD,QAAQ,CAACC,WAAW,CAAC,GAACD,QAAQ,CAAC,EAAE,CAAC;EACnD,CAAC,EAAE,EAAE,CAAC;EAENV,SAAS,CAAC,MAAM;IACdc,YAAY,CAACE,OAAO,CAAC,OAAO,EAAEJ,IAAI,CAACK,SAAS,CAACR,KAAK,CAAC,CAAC;EACtD,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMS,OAAO,GAAIC,IAAI,IAAK;IACxBT,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEU,IAAI,CAAC,CAAC;EAC5B,CAAC;EAED,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IACrC;;IAGA;IACA,OAAO,KAAK;EACd,CAAC;EAED,MAAMC,UAAU,GAAIJ,IAAI,IAAK;IAC3B,IAAIK,GAAG,GAAC,CAAC,CAAC;IACV,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,KAAK,CAACiB,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAIL,YAAY,CAACX,KAAK,CAACgB,CAAC,CAAC,EAAEN,IAAI,CAAC,EAAE;QAChCK,GAAG,GAAGC,CAAC;QACP;MACF;IACF;IACA,IAAGD,GAAG,IAAE,CAAC,CAAC,EAAC;MACTd,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAACkB,KAAK,CAAC,CAAC,EAAEH,GAAG,CAAC,EAAE,GAAGf,KAAK,CAACkB,KAAK,CAACH,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7D;EACF,CAAC;EAED,MAAMI,UAAU,GAAGA,CAACT,IAAI,EAAEU,OAAO,KAAK;IACpC,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,KAAK,CAACiB,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAIL,YAAY,CAACX,KAAK,CAACgB,CAAC,CAAC,EAAEN,IAAI,CAAC,EAAE;QAChCV,KAAK,CAACgB,CAAC,CAAC;MACV;IACF;EACF,CAAC;EAED,oBACEtB,OAAA;IAAK2B,SAAS,EAAE,MAAM,IAAIxB,UAAU,GAAE,YAAY,GAAC,EAAE,CAAE;IAAAyB,QAAA,eACrD5B,OAAA,CAACF,MAAM;MAACO,WAAW,EAAEA;IAAY;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEV,CAAC;AAAC9B,EAAA,CAxDID,GAAG;AAAAgC,EAAA,GAAHhC,GAAG;AA0DT,eAAeA,GAAG;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}