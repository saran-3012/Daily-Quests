{"ast":null,"code":"var _jsxFileName = \"C:\\\\My Projects\\\\todo-list-app\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Theme Switcher\n  const [isDarkMode, setIsDarkMode] = useState(localStorage.getItem('tasks'));\n  useEffect(() => {\n    localStorage.setItem('dark-mode', isDarkMode);\n  }, [isDarkMode]);\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n\n  // Task Management\n  const [tasks, setTasks] = useState({});\n  useEffect(() => {\n    const storedTasks = JSON.parse(localStorage.getItem('tasks'));\n    storedTasks ? setTasks(storedTasks) : setTasks({});\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n  const getKey = task => {\n    const key = task.date + task.time;\n    return key;\n  };\n  const addTask = task => {\n    const key = getKey(task);\n    const updatedTasks = {\n      ...tasks,\n      [key]: task\n    };\n    setTasks(updatedTasks);\n  };\n  const updateTask = (task, newTask) => {\n    const key = getKey(task);\n    const updatedTasks = {\n      ...tasks,\n      [key]: newTask\n    };\n    setTasks(updatedTasks);\n  };\n  const deleteTask = task => {\n    const key = getKey(task);\n    const updatedTasks = {\n      ...tasks\n    };\n    delete updatedTasks[key];\n    setTasks(updatedTasks);\n  };\n  const clearAllTasks = () => {\n    setTasks({});\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'App ' + (isDarkMode ? 'dark-theme' : ''),\n    children: /*#__PURE__*/_jsxDEV(Navbar, {\n      toggleTheme: toggleTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ydbhx/cLLxS7fQbMvdpUSycLG94=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","jsxDEV","_jsxDEV","App","_s","isDarkMode","setIsDarkMode","localStorage","getItem","setItem","toggleTheme","tasks","setTasks","storedTasks","JSON","parse","stringify","getKey","task","key","date","time","addTask","updatedTasks","updateTask","newTask","deleteTask","clearAllTasks","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/My Projects/todo-list-app/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\n\nconst App = () => {\n\n  // Theme Switcher\n  const [isDarkMode, setIsDarkMode] = useState(localStorage.getItem('tasks'));\n\n  useEffect(() => {\n    localStorage.setItem('dark-mode', isDarkMode);\n  }, [isDarkMode]);\n\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n\n  // Task Management\n  const [tasks, setTasks] = useState({});\n  useEffect(() => {\n    const storedTasks = JSON.parse(localStorage.getItem('tasks'));\n    (storedTasks)? setTasks(storedTasks):setTasks({});\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n\n  const getKey = (task) => {\n    const key = task.date + task.time;\n    return key;\n  }\n\n  const addTask = (task) => {\n    const key = getKey(task);\n    const updatedTasks = {...tasks, [key] : task};\n    setTasks(updatedTasks);\n  };\n\n  const updateTask = (task, newTask) => {\n    const key = getKey(task);\n    const updatedTasks = {...tasks, [key] : newTask};\n    setTasks(updatedTasks);\n  };\n\n  const deleteTask = (task) => {\n    const key = getKey(task);\n    const updatedTasks = {...tasks};\n    delete updatedTasks[key];\n    setTasks(updatedTasks);\n  };\n\n  const clearAllTasks = () => {\n    setTasks({});\n  };\n\n  return (\n    <div className={'App ' + (isDarkMode? 'dark-theme':'')}>\n      <Navbar toggleTheme={toggleTheme} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhB;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAACS,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EAE3ET,SAAS,CAAC,MAAM;IACdQ,YAAY,CAACE,OAAO,CAAC,WAAW,EAAEJ,UAAU,CAAC;EAC/C,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,MAAMK,WAAW,GAAGA,CAAA,KAAM;IACxBJ,aAAa,CAAC,CAACD,UAAU,CAAC;EAC5B,CAAC;;EAED;EACA,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtCC,SAAS,CAAC,MAAM;IACd,MAAMc,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACR,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC5DK,WAAW,GAAGD,QAAQ,CAACC,WAAW,CAAC,GAACD,QAAQ,CAAC,CAAC,CAAC,CAAC;EACnD,CAAC,EAAE,EAAE,CAAC;EAENb,SAAS,CAAC,MAAM;IACdQ,YAAY,CAACE,OAAO,CAAC,OAAO,EAAEK,IAAI,CAACE,SAAS,CAACL,KAAK,CAAC,CAAC;EACtD,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAGX,MAAMM,MAAM,GAAIC,IAAI,IAAK;IACvB,MAAMC,GAAG,GAAGD,IAAI,CAACE,IAAI,GAAGF,IAAI,CAACG,IAAI;IACjC,OAAOF,GAAG;EACZ,CAAC;EAED,MAAMG,OAAO,GAAIJ,IAAI,IAAK;IACxB,MAAMC,GAAG,GAAGF,MAAM,CAACC,IAAI,CAAC;IACxB,MAAMK,YAAY,GAAG;MAAC,GAAGZ,KAAK;MAAE,CAACQ,GAAG,GAAID;IAAI,CAAC;IAC7CN,QAAQ,CAACW,YAAY,CAAC;EACxB,CAAC;EAED,MAAMC,UAAU,GAAGA,CAACN,IAAI,EAAEO,OAAO,KAAK;IACpC,MAAMN,GAAG,GAAGF,MAAM,CAACC,IAAI,CAAC;IACxB,MAAMK,YAAY,GAAG;MAAC,GAAGZ,KAAK;MAAE,CAACQ,GAAG,GAAIM;IAAO,CAAC;IAChDb,QAAQ,CAACW,YAAY,CAAC;EACxB,CAAC;EAED,MAAMG,UAAU,GAAIR,IAAI,IAAK;IAC3B,MAAMC,GAAG,GAAGF,MAAM,CAACC,IAAI,CAAC;IACxB,MAAMK,YAAY,GAAG;MAAC,GAAGZ;IAAK,CAAC;IAC/B,OAAOY,YAAY,CAACJ,GAAG,CAAC;IACxBP,QAAQ,CAACW,YAAY,CAAC;EACxB,CAAC;EAED,MAAMI,aAAa,GAAGA,CAAA,KAAM;IAC1Bf,QAAQ,CAAC,CAAC,CAAC,CAAC;EACd,CAAC;EAED,oBACEV,OAAA;IAAK0B,SAAS,EAAE,MAAM,IAAIvB,UAAU,GAAE,YAAY,GAAC,EAAE,CAAE;IAAAwB,QAAA,eACrD3B,OAAA,CAACF,MAAM;MAACU,WAAW,EAAEA;IAAY;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEV,CAAC;AAAC7B,EAAA,CA1DID,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AA4DT,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}