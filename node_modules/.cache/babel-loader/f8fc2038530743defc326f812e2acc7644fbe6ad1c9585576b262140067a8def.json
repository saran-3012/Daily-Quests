{"ast":null,"code":"var _jsxFileName = \"C:\\\\My Projects\\\\todo-list-app\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './Components/NavbarComponents/Navbar';\nimport Sidebar from './Components/SidebarComponents/Sidebar';\nimport TaskInterface from './Components/TaskComponents/TaskInterface';\nimport ShowPopupInterface from './Components/PopupComponents/ShowPopupInterface';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Theme Switcher\n  const [theme, setTheme] = useState(localStorage.getItem('theme') || 'light-theme');\n  useEffect(() => {\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n  const toggleTheme = () => {\n    theme === 'dark-theme' ? setTheme('light-theme') : setTheme('dark-theme');\n  };\n\n  // Toggle Sidebar\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const toggleSidebar = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n  const sidebarDetails = {\n    isSidebarOpen: isSidebarOpen,\n    toggleSidebar: toggleSidebar\n  };\n\n  // Popup Messages\n\n  const [currentPopupMessage, setCurrentPopupMessage] = useState('add-task');\n  const changePopupMessageBox = msgBox => {\n    currentPopupMessage === msgBox ? setCurrentPopupMessage('') : setCurrentPopupMessage(msgBox);\n  };\n\n  // Task Management\n\n  const [tasks, setTasks] = useState({});\n  useEffect(() => {\n    const storedTasks = JSON.parse(localStorage.getItem('tasks'));\n    storedTasks ? setTasks(storedTasks) : setTasks({});\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n  const getKey = task => {\n    const key = task.date + task.time;\n    return key;\n  };\n  const searchTask = () => {\n    const searchResult = tasks.f;\n  };\n  const addTask = task => {\n    const key = getKey(task);\n    const updatedTasks = {\n      ...tasks,\n      [key]: task\n    };\n    setTasks(updatedTasks);\n  };\n  const updateTask = (task, newTask) => {\n    const key = getKey(task);\n    const updatedTasks = {\n      ...tasks,\n      [key]: newTask\n    };\n    setTasks(updatedTasks);\n  };\n  const deleteTask = task => {\n    const key = getKey(task);\n    const updatedTasks = {\n      ...tasks\n    };\n    delete updatedTasks[key];\n    setTasks(updatedTasks);\n  };\n  const clearAllTasks = () => {\n    setTasks({});\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'App ' + theme,\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      toggleTheme: toggleTheme,\n      sidebarDetails: sidebarDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n      sidebarDetails: sidebarDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskInterface, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), currentPopupMessage && /*#__PURE__*/_jsxDEV(ShowPopupInterface, {\n      currentPopupMessage: currentPopupMessage,\n      changePopupMessageBox: changePopupMessageBox\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"kRnhvq74y6wrj2ZoLIPuIxx0Ghs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","Sidebar","TaskInterface","ShowPopupInterface","jsxDEV","_jsxDEV","App","_s","theme","setTheme","localStorage","getItem","setItem","toggleTheme","isSidebarOpen","setIsSidebarOpen","toggleSidebar","sidebarDetails","currentPopupMessage","setCurrentPopupMessage","changePopupMessageBox","msgBox","tasks","setTasks","storedTasks","JSON","parse","stringify","getKey","task","key","date","time","searchTask","searchResult","f","addTask","updatedTasks","updateTask","newTask","deleteTask","clearAllTasks","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/My Projects/todo-list-app/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Navbar from './Components/NavbarComponents/Navbar';\nimport Sidebar from './Components/SidebarComponents/Sidebar';\nimport TaskInterface from './Components/TaskComponents/TaskInterface';\nimport ShowPopupInterface from './Components/PopupComponents/ShowPopupInterface';\n\nconst App = () => {\n\n  // Theme Switcher\n  const [theme, setTheme] = useState(localStorage.getItem('theme') || 'light-theme');\n\n  useEffect(() => {\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    (theme==='dark-theme')? setTheme('light-theme'):setTheme('dark-theme');\n  };\n\n  // Toggle Sidebar\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  const toggleSidebar = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n\n  const sidebarDetails = {\n    isSidebarOpen:isSidebarOpen, \n    toggleSidebar:toggleSidebar\n  };\n\n  // Popup Messages\n\n  const [currentPopupMessage, setCurrentPopupMessage] = useState('add-task');\n  const changePopupMessageBox = (msgBox) => {\n    (currentPopupMessage===msgBox)?setCurrentPopupMessage(''):setCurrentPopupMessage(msgBox);\n  };\n\n  // Task Management\n\n  const [tasks, setTasks] = useState({});\n  useEffect(() => {\n    const storedTasks = JSON.parse(localStorage.getItem('tasks'));\n    (storedTasks)? setTasks(storedTasks):setTasks({});\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n\n  const getKey = (task) => {\n    const key = task.date + task.time;\n    return key;\n  }\n\n  const searchTask = () => {\n    const searchResult = tasks.f\n  }\n\n  const addTask = (task) => {\n    const key = getKey(task);\n    const updatedTasks = {...tasks, [key] : task};\n    setTasks(updatedTasks);\n  };\n\n  const updateTask = (task, newTask) => {\n    const key = getKey(task);\n    const updatedTasks = {...tasks, [key] : newTask};\n    setTasks(updatedTasks);\n  };\n\n  const deleteTask = (task) => {\n    const key = getKey(task);\n    const updatedTasks = {...tasks};\n    delete updatedTasks[key];\n    setTasks(updatedTasks);\n  };\n\n  const clearAllTasks = () => {\n    setTasks({});\n  };\n\n  return (\n    <div className={'App ' + theme}>\n      <Navbar toggleTheme={toggleTheme} sidebarDetails={sidebarDetails}/>\n      <Sidebar sidebarDetails={sidebarDetails}/>\n      <TaskInterface />\n      {\n        currentPopupMessage && \n        <ShowPopupInterface \n          currentPopupMessage={currentPopupMessage}\n          changePopupMessageBox={changePopupMessageBox}\n        />\n      }\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}